#!/usr/bin/python

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import subprocess
import simplejson
import fileinput
import os
import tempfile
import shlex

def register(input_json):
    hotspot_id = input_json['hotspotId']
    hotspot_name = input_json['hotspotName']
    unit_description = input_json['unitDescription']
    network_device = input_json['networkDevice']
    network_address = input_json['networkAddress']
    hostname = input_json['hostname']
    unit_name = input_json['unitName']

    try:
        command_args = ['/sbin/e-smith/config', 'setprop', 'dedalo', 'Id', str(hotspot_id), 'Name', hotspot_name, 'Description', unit_description, 'IcaroHost', hostname, 'UnitName', unit_name, 'Network', network_address]
        process = subprocess.Popen(command_args, stdout=sys.stdout, stderr=sys.stderr)
        output, error = process.communicate()
    except Exception, e:
        return "Error setting props: %s" % e

    # release hotspot role for all devices
    try:
        bash_command = "/sbin/e-smith/db networks getjson"
        process = subprocess.Popen(bash_command.split(), stdout=subprocess.PIPE)
        output, error = process.communicate()
    except Exception, e:
        return "Error retrieving db networks: %s" % e

    networks_json = simplejson.loads(output)
    hotspot_networks_to_reset = []

    for network in networks_json:
        if 'role' in network['props'] and network['props']['role'] == 'hotspot':
            hotspot_networks_to_reset.append(network['name'])

    for network in hotspot_networks_to_reset:
        try:
            bash_command = "/sbin/e-smith/db 'networks' 'setprop' '%s' 'role' '' " % network
            process = subprocess.Popen(shlex.split(bash_command), stdout=sys.stdout, stderr=sys.stderr)
            output, error = process.communicate()
        except Exception, e:
            return "Error releasing hotspot role for network %s: %s" % (network, e)

    # set hotspot role for selected device
    try:
        bash_command = "/sbin/e-smith/db networks setprop %s role hotspot" % network_device
        process = subprocess.Popen(bash_command.split(), stdout=sys.stdout, stderr=sys.stderr)
        output, error = process.communicate()
    except Exception, e:
        return "Error setting hotspot role for network %s: %s" % (network, e)

    token_json = None

    # write token to temp file
    with open(os.getenv("HOME") + '/.dedalo-token') as f:
        token_file = f.read()
        token_json = simplejson.loads(token_file)
    f.closed

    token = token_json['token']

    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        tmp_file.write(token)
        tmp_file.flush()

        try:
            bash_command = "/sbin/e-smith/signal-event -j nethserver-dedalo-register %s" % tmp_file.name
            process = subprocess.Popen(bash_command.split(), stdout=sys.stdout, stderr=sys.stderr)
            output, error = process.communicate()
            return_code = process.returncode

            if return_code != 0:
                return "Event failed, see /var/log/messages"
        except Exception, e:
            return "Event failed, see /var/log/messages: %s" % e
            
def unregister(input_json, logout_user):
    try:
        bash_command = "/sbin/e-smith/signal-event -j nethserver-dedalo-unregister"
        process = subprocess.Popen(bash_command.split(), stdout=sys.stdout, stderr=sys.stderr)
        output, error = process.communicate()
        return_code = process.returncode

        if return_code != 0:
            return "Event failed, see /var/log/messages"

        if logout_user:
            os.remove(os.getenv("HOME") + '/.dedalo-token')
    except Exception, e:
        return "Event failed, see /var/log/messages: %s" % e

try:
    line = fileinput.input()[0].rstrip()
    input_json = simplejson.loads(line)
    app_info = input_json["action"]

    if app_info == 'register':
        error = register(input_json)
    elif app_info == 'unregister':
        logout = input_json["logout"]
        error = unregister(input_json, logout)
        
        
    if error:
        output = simplejson.dumps({'state': 'error', 'message': error})
        print(output)
        sys.exit(1)
    else:
        output = simplejson.dumps({'state': 'success'})
        print(output)
except Exception, e:
    print simplejson.dumps({ 'error': "%s" % e })
    sys.exit(1)
