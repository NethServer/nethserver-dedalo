#!/usr/bin/python

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import fileinput
import subprocess
import simplejson
import ipaddress

def update(input_json):
    network = input_json['network']
    proxy = input_json['proxy']
    log_traffic = input_json['logTraffic']
    device = input_json['device']
    ip_address = input_json['ipAddress']
    dhcp_range_start = input_json['dhcpRangeStart']
    dhcp_range_end = input_json['dhcpRangeEnd']

    # check and convert dhcp range values to integer
    network_dhcp = ipaddress.ip_network(u''+network)
    hosts = list(network_dhcp.hosts())
    first, last = str(hosts[0]), str(hosts[-1])
    network_ip_string = network.split("/")[0]
    network_int = int(ipaddress.IPv4Address(u'' + network_ip_string))
    firstClient = int(ipaddress.IPv4Address(u'' + first)) + 1 # first address is reserved for hotspot
    lastClient = int(ipaddress.IPv4Address(u'' + last))
    dhcp_range_start_int = int(ipaddress.IPv4Address(u'' + dhcp_range_start))
    dhcp_range_end_int = int(ipaddress.IPv4Address(u'' + dhcp_range_end))
    
    if dhcp_range_start_int < firstClient or \
            dhcp_range_end_int > lastClient or \
            dhcp_range_start_int > dhcp_range_end_int:
        return "Invalid DHCP range"

    config_dhcp_start = dhcp_range_start_int - network_int
    config_dhcp_end = dhcp_range_end_int - network_int

    try:
        bash_command = "/sbin/e-smith/config setprop dedalo Network %s DhcpStart %s DhcpEnd %s Proxy %s LogTraffic %s" % (network, config_dhcp_start, config_dhcp_end, proxy, log_traffic)
        process = subprocess.Popen(bash_command.split(), stdout=subprocess.PIPE)
        output, error = process.communicate()
    except Exception, e:
        return "Error setting props: %s" % e

    # release hotspot role for all devices
    try:
        bash_command = "/sbin/e-smith/db networks getjson"
        process = subprocess.Popen(bash_command.split(), stdout=subprocess.PIPE)
        output, error = process.communicate()
    except Exception, e:
        return "Error retrieving db networks: %s" % e

    networks_json = simplejson.loads(output)
    hotspot_networks_to_reset = []

    for network in networks_json:
        if 'role' in network['props'] and network['props']['role'] == 'hotspot':
            hotspot_networks_to_reset.append(network['name'])

    for network in hotspot_networks_to_reset:
        try:
            # if network device has an ip address, reset ipaddr and netmask
            if ip_address:
                command_args = ['/sbin/e-smith/db', 'networks', 'setprop', network, 'role', '', 'ipaddr', '', 'netmask', '']
            else:
                command_args = ['/sbin/e-smith/db', 'networks', 'setprop', network, 'role', '']
            
            process = subprocess.Popen(command_args, stdout=subprocess.PIPE)
            output, error = process.communicate()
        except Exception, e:
            return "Error releasing hotspot role for network %s: %s" % (network, e)

    # set hotspot role for selected device
    try:
        bash_command = "/sbin/e-smith/db networks setprop %s role hotspot" % device
        process = subprocess.Popen(bash_command.split(), stdout=subprocess.PIPE)
        output, error = process.communicate()
    except Exception, e:
        return "Error setting hotspot role for network %s: %s" % (network, e)

    if ip_address:
        try:
            bash_command = "/sbin/e-smith/signal-event -j interface-update"
            process = subprocess.Popen(bash_command.split(), stdout=sys.stdout, stderr=sys.stderr)
            output, error = process.communicate()
            return_code = process.returncode

            if return_code != 0:
                return "Event failed, see /var/log/messages"
        except Exception, e:
            return "Event failed, see /var/log/messages: %s" % e

    # nethserver-dedalo-save
    try:
        bash_command = "/sbin/e-smith/signal-event -j nethserver-dedalo-save"
        process = subprocess.Popen(bash_command.split(), stdout=sys.stdout, stderr=sys.stderr)
        output, error = process.communicate()
        return_code = process.returncode

        if return_code != 0:
            return "Event failed, see /var/log/messages"
    except Exception, e:
        return "Event failed, see /var/log/messages: %s" % e

try:
    line = fileinput.input()[0].rstrip()
    input_json = simplejson.loads(line)
    error = update(input_json)

    if error:
        output = simplejson.dumps({'state': 'error', 'message': error})
        print(output)
        sys.exit(1)
    else:
        output = simplejson.dumps({'state': 'success'})
        print(output)
except Exception, e:
    print simplejson.dumps({ 'error': "%s" % e })
    sys.exit(1)
